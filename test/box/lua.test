# encoding: tarantool
import os
import sys
# Test Lua from admin console. Whenever producing output,
# make sure it's a valid YAML.
exec admin "lua"
exec admin "lua 1"
exec admin "lua print('  lua says: hello')"
# What's in the box? 
exec admin "lua for n in pairs(box) do print('  - box.', n) end"
# Test box.pack()
exec admin "lua box.pack()"
exec admin "lua box.pack(1)"
exec admin "lua box.pack('abc')"
exec admin "lua print(box.pack('a', ' - hello'))"
exec admin "lua print(box.pack('Aa', ' - hello', ' world'))"
exec admin "lua print(box.pack('w', 0x30))"
exec admin "lua print(box.pack('www', 0x30, 0x30, 0x30))"
exec admin "lua print(box.pack('www', 0x3030, 0x30))"
exec admin "lua print(string.byte(box.pack('w', 212345), 1, 2))"
exec admin "lua print(string.sub(box.pack('p', 1684234849), 2))"
exec admin "lua print(box.pack('p', 'this string is 45 characters long 1234567890 '))"
# Test the low-level box.process() call, which takes a binary packet
# and passes it to box for execution.
# insert:
exec admin "lua box.process(13, box.pack('iiippp', 0, 1, 3, 1, 'testing', 'lua rocks'))"
# select:
exec admin "lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))"
# delete:
exec admin "lua box.process(21, box.pack('iiip', 0, 1, 1, 1))"
# check delete:
exec admin "lua box.process(17, box.pack('iiiiiip', 0, 0, 0, 2^31, 1, 1, 1))"
exec admin "lua box.process(22, box.pack('iii', 0, 0, 0))"
exec sql "call box.process('abc', 'def')"
exec sql "call box.pack('test')"
exec sql "call box.pack('p', 'this string is 45 characters long 1234567890 ')"
exec sql "call box.pack('p', 'ascii symbols are visible starting from code 20')"
exec admin "lua function f1() return 'testing', 1, false, -1, 1.123, 1e123, nil end"
exec admin "lua f1()"
exec sql "call f1()"
exec admin "lua f1=nil"
exec sql "call f1()"
exec admin "lua function f1() return f1 end"
exec sql "call f1()"

exec sql "insert into t0 values (1, 'test box delete')"
exec sql "call box.delete(0, '\1\0\0\0')"
exec sql "call box.delete(0, '\1\0\0\0')"
exec sql "insert into t0 values (1, 'test box delete')"
exec admin "lua box.delete(0, 1)"
exec admin "lua box.delete(0, 1)"
exec sql "insert into t0 values ('abcd', 'test box delete')"
exec sql "call box.delete(0, '\1\0\0\0')"
exec sql "call box.delete(0, 'abcd')"
exec sql "call box.delete(0, 'abcd')"
exec sql "insert into t0 values ('abcd', 'test box delete')"
exec admin "lua box.delete(0, 'abcd')"
exec admin "lua box.delete(0, 'abcd')"
exec sql "call box.select(0, 0, 'abcd')"
exec sql "insert into t0 values ('abcd', 'test box.select()')"
exec sql "call box.select(0, 0, 'abcd')"
exec admin "lua box.select(0, 0, 'abcd')"
exec admin "lua box.select(0, 0)"
exec admin "lua box.select(0, 1)"
exec admin "lua box.select(0)"
exec sql "call box.replace(0, 'abcd', 'hello', 'world')"
exec sql "call box.replace(0, 'defc', 'goodbye', 'universe')"
exec sql "call box.select(0, 0, 'abcd')"
exec sql "call box.select(0, 0, 'defc')"
exec sql "call box.replace(0, 'abcd')"
exec sql "call box.select(0, 0, 'abcd')"
exec sql "call box.delete(0, 'abcd')"
exec sql "call box.delete(0, 'defc')"
exec sql "call box.insert(0, 'test', 'old', 'abcd')"
# test that insert produces a duplicate key error
exec sql "call box.insert(0, 'test', 'old', 'abcd')"
exec sql "call box.update(0, 'test', '=p=p', 0, 'pass', 1, 'new')"
exec sql "call box.select(0, 0, 'pass')"
exec sql "call box.select_range(0, 0, 1, 'pass')"
exec sql "call box.update(0, 'miss', '+p', 2, '\1\0\0\0')"
exec sql "call box.update(0, 'pass', '+p', 2, '\1\0\0\0')"
exec admin "lua box.update(0, 'pass', '+p', 2, 1)"
exec sql "call box.select(0, 0, 'pass')"
exec admin "lua function field_x(space, key, field_index) return (box.select(space, 0, key))[field_index] end"
exec sql "call field_x(0, 'pass', 0)"
exec sql "call field_x(0, 'pass', 1)"
exec sql "call box.delete(0, 'pass')"
fifo_lua = os.path.abspath("box/fifo.lua")
# don't log the path name
sys.stdout.push_filter("lua dofile(.*)", "lua dofile(...)")
exec admin "lua dofile('{0}')".format(fifo_lua)
sys.stdout.pop_filter()
exec admin "lua fifo_max"
exec admin "lua fifo_push('test', 1)"
exec admin "lua fifo_push('test', 2)"
exec admin "lua fifo_push('test', 3)"
exec admin "lua fifo_push('test', 4)"
exec admin "lua fifo_push('test', 5)"
exec admin "lua fifo_push('test', 6)"
exec admin "lua fifo_push('test', 7)"
exec admin "lua fifo_push('test', 8)"
exec admin "lua fifo_top('test')"
exec admin "lua box.delete(0, 'test')"
exec admin "lua fifo_top('test')"
exec admin "lua box.delete(0, 'test')"
exec admin "lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end"
exec admin "lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end"
exec admin "reload configuration"
exec admin "lua for k,v in pairs(box.cfg) do print(' - ', k, ': ', v) end"
exec admin "lua for k,v in pairs(box.space[0]) do if type(v) ~= 'table' then print(' - ', k, ': ', v) end end"
# must be read-only
exec admin "lua box.cfg.nosuchoption = 1"
exec admin "lua box.space[300] = 1"

exec admin "lua box.index.new('abc', 'cde')"
exec admin "lua box.index.new(1, 2)"
exec admin "lua box.index.new(0, 1)"
exec admin "lua box.index.new(0, 0)"
exec admin "lua #box.index.new(0,0)"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua box.insert(0, 'test')"
exec admin "lua box.insert(0, 'abcd')"
exec admin "lua #box.index.new(0,0)"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua box.delete(0, 'test')"
exec admin "lua #box.index.new(0,0)"
exec admin "lua box.delete(0, 'abcd')"
exec admin "lua #box.space[0].index[0].idx"
exec admin "lua #box.index.new(0,0)"
exec admin "lua box.space[0]:insert('test', 'hello world')"
exec admin "lua box.space[0]:update('test', '=p', 1, 'bye, world')"
exec admin "lua box.space[0]:delete('test')"
# test tuple iterators
exec admin "lua t=box.space[0]:insert('test')"
exec admin "lua t:next('abcd')"
exec admin "lua t:next(1)"
exec admin "lua t:next(t)"
exec admin "lua t:next(t:next())"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua t=box.space[0]:replace('test', 'another field')"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua t=box.space[0]:replace('test', 'another field', 'one more')"
exec admin "lua for k, v in t:pairs() do print(v) end"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.fiber.sleep(0)"
exec admin "lua box.fiber.sleep(0.01)"
exec admin "lua box.fiber.sleep(0.0001)"
exec admin "lua box.fiber.sleep('hello')"
exec admin "lua box.fiber.sleep(box, 0.001)"
exec admin "lua f = box.fiber.self()"
exec admin "lua old_id = f:id()"
exec admin "lua box.fiber.cancel(f)"
exec admin "lua box.fiber.self():id() - old_id < 3"
exec admin "lua box.fiber.cancel(box.fiber.self())"
exec admin "lua box.fiber.self():id() - old_id < 4"
exec admin "lua g = box.fiber.self()"
exec admin "lua f==g"
exec admin "lua function r() f = box.fiber.create(r) return (box.fiber.resume(f)) end"
exec admin "lua r()"
exec admin "lua f = box.fiber.create(print('hello')"
exec admin "lua box.fiber.resume(f)"
# test passing arguments in and out created fiber
exec admin "lua function r(a, b) print(a) print(b) return a, b end"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello')"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello', 'world')"
exec admin "lua f=box.fiber.create(r)"
exec admin "lua box.fiber.resume(f, 'hello', 'world', 'wide')"
exec admin "lua function y(a, b) c=box.fiber.yield(a) return box.fiber.yield(b, c) end"
exec admin "lua f=box.fiber.create(y)"
exec admin "lua box.fiber.resume(f, 'hello', 'world')"
exec admin "lua box.fiber.resume(f, 'wide')"
exec admin "lua box.fiber.resume(f)"
exec admin "lua function y() print('started') box.fiber.detach() while true do box.replace(0, 'test', os.time()) box.fiber.sleep(0.001) end end"
exec admin "lua f = box.fiber.create(y)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua box.fiber.sleep(0.002)"
exec admin "lua box.fiber.cancel(f)"
exec admin "lua box.fiber.resume(f)"
exec admin "lua f=nil"
exec admin "lua for k=1, 10000, 1 do box.fiber.create(function() box.fiber.detach() end) end"
exec admin "lua collectgarbage('collect')"
# check that these newly created fibers are garbage collected
exec admin "lua box.fiber.find(900)"
exec admin "lua box.fiber.find(910)"
exec admin "lua box.fiber.find(920)"
exec admin "lua box.space[0]:insert('test', 'something to splice')"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 4, 'no'))"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 0, 2, 'every'))"
# check an incorrect offset
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', 100, 2, 'every'))"
exec admin "lua box.space[0]:update('test', ':p', 1, box.pack('ppp', -100, 2, 'every'))"
exec admin "lua box.space[0]:truncate()"
exec admin "lua box.space[0]:insert('test', 'hello', 'october', '20th'):unpack()"
exec admin "lua box.space[0]:truncate()"
# check how well we can return tables
exec admin "lua function f1(...) return {...} end"
exec admin "lua function f2(...) return f1({...}) end"
exec sql "call f1('test', 'test')"
exec sql "call f2('test', 'test')"
exec sql "call f1()"
exec sql "call f2()"
exec sql "call f1('jason')"
exec sql "call f1('jason', 1, 'test', 2, 'stewart')"
lua = """
function box.crossjoin(space0, space1, limit)
  space0 = tonumber(space0)
  space1 = tonumber(space1)
  limit = tonumber(limit)
  local result = {}
  for k0, v0 in box.space[space0]:pairs() do
    for k1, v1 in box.space[space1]:pairs() do
      if limit <= 0 then
        return unpack(result)
      end
      newtuple = {v0:unpack()}
      for _, v in v1:pairs() do table.insert(newtuple, v) end
      table.insert(result, newtuple)
      limit = limit - 1
    end
  end
  return unpack(result)
end"""
exec admin "lua " + lua.replace('\n', ' ')
exec admin "lua box.crossjoin(0, 0, 0)"
exec admin "lua box.crossjoin(0, 0, 10000)"
exec admin "lua box.space[0]:insert(1)"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(2)"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(3, 'hello')"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:insert(4, 'world')"
exec admin "lua box.space[0]:insert(5, 'hello world')"
exec sql "call box.crossjoin('0', '0', '10000')"
exec admin "lua box.space[0]:truncate()"
print """
# A test case for Bug#901674
# No way to inspect exceptions from Box in Lua
"""
exec admin "lua pcall(box.insert, 99, 1, 'test')"
exec admin "lua pcall(box.insert, 0, 1, 'hello')"
exec admin "lua pcall(box.insert, 0, 1, 'hello')"
exec admin "lua box.space[0]:truncate()"
print """
# A test case for Bug#908094
# Lua provides access to os.execute()
"""
exec admin "lua os.execute('ls')"
