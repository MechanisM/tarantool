# encoding: tarantool
#
# integer keys
exec sql "insert into t2 values (1, 'tuple')"
exec admin "save snapshot"
exec sql "insert into t2 values (2, 'tuple 2')"
exec admin "save snapshot"

exec sql "insert into t2 values (3, 'tuple 3')"
exec sql "select * from t2 where k0 = 1"
exec sql "select * from t2 where k0 = 2"
exec sql "select * from t2 where k0 = 3"

# Cleanup
exec sql "delete from t2 where k0 = 1"
exec sql "delete from t2 where k0 = 2"
exec sql "delete from t2 where k0 = 3"
# string keys
exec sql "insert into t3 values ('identifier', 'tuple')"
exec admin "save snapshot"
exec sql "insert into t3 values ('second', 'tuple 2')"
exec admin "save snapshot"
exec sql "call box.select_range(3, 0, 100, 'second')"
exec sql "call box.select_range(3, 0, 100, 'identifier')"

exec sql "insert into t3 values ('third', 'tuple 3')"
exec sql "select * from t3 where k0 = 'identifier'"
exec sql "select * from t3 where k0 = 'second'"
exec sql "select * from t3 where k0 = 'third'"

# Cleanup
exec sql "delete from t3 where k0 = 'identifier'"
exec sql "delete from t3 where k0 = 'second'"
exec sql "delete from t3 where k0 = 'third'"
lua = """
function box.crossjoin(space0, space1, limit)
  space0 = tonumber(space0)
  space1 = tonumber(space1)
  limit = tonumber(limit)
  local result = {}
  for k0, v0 in box.space[space0]:pairs() do
    for k1, v1 in box.space[space1]:pairs() do
      if limit <= 0 then
        return unpack(result)
      end
      newtuple = {v0:unpack()}
      for _, v in v1:pairs() do table.insert(newtuple, v) end
      table.insert(result, newtuple)
      limit = limit - 1
    end
  end
  return unpack(result)
end"""
exec sql "insert into t2 values (1, 'tuple')"
exec sql "insert into t3 values (1, 'tuple')"
exec sql "insert into t3 values (2, 'tuple')"
exec admin "lua " + lua.replace('\n', ' ')
exec sql "call box.crossjoin(3, 3, 0)"
exec sql "call box.crossjoin(3, 3, 5)"
exec sql "call box.crossjoin(3, 3, 10000)"
exec sql "call box.crossjoin(3, 2, 10000)"
exec admin "lua box.space[3]:truncate()"
